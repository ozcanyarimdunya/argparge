{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction A very simple tool to create beautiful console application by using native argparse. Project Commander Author \u00d6zcan Yar\u0131md\u00fcnya Documentation https://ozcanyarimdunya.github.io/argparge/ Source code https://github.com/ozcanyarimdunya/argparge/ argparge is a library that you can create beautiful class based cli application. Installation Works on python3+ with no extra dependencies. pip install argparge Usage example.py from argparge import Application from argparge import Command class GreetCommand(Command): name = \"greet\" help = \"Greeting a person\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Person name\") def handle(self, **arguments): print(\"Greeting, \", arguments.get(\"name\")) if __name__ == '__main__': app = Application(description=\"A simple argparge application\") app.add_argument(\"-V\", \"--version\", action=\"version\", version=\"1.0.0\") app.add_commands( GreetCommand(), ) app.run() If we run we get such output. For more checkout tutorials. LICENSE MIT License Copyright (c) 2023 yarimdunya.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Introduction"},{"location":"#introduction","text":"A very simple tool to create beautiful console application by using native argparse. Project Commander Author \u00d6zcan Yar\u0131md\u00fcnya Documentation https://ozcanyarimdunya.github.io/argparge/ Source code https://github.com/ozcanyarimdunya/argparge/ argparge is a library that you can create beautiful class based cli application.","title":"Introduction"},{"location":"#installation","text":"Works on python3+ with no extra dependencies. pip install argparge","title":"Installation"},{"location":"#usage","text":"example.py from argparge import Application from argparge import Command class GreetCommand(Command): name = \"greet\" help = \"Greeting a person\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Person name\") def handle(self, **arguments): print(\"Greeting, \", arguments.get(\"name\")) if __name__ == '__main__': app = Application(description=\"A simple argparge application\") app.add_argument(\"-V\", \"--version\", action=\"version\", version=\"1.0.0\") app.add_commands( GreetCommand(), ) app.run() If we run we get such output. For more checkout tutorials.","title":"Usage"},{"location":"#license","text":"MIT License Copyright (c) 2023 yarimdunya.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"tutorial/","text":"Tutorial Simple usage (no subcommands) from argparge import Application app = Application(description=\"A simple argparge application\") app.add_argument(\"message\", help=\"Your message\") app.add_argument(\"-v\", \"--version\", action=\"version\", version=\"1.0.0\") app.run() print(app.arguments) Multiple command usage Let's have cli that user can greet a person, list , create , sell and item. from argparge import Application from argparge import Command from argparge import GroupCommand class GreetCommand(Command): name = \"greet\" help = \"Greeting a person\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Person name\") def handle(self, **arguments): print(\"Greeting, \", arguments.get(\"name\")) class ItemListCommand(Command): name = \"list\" help = \"List all item\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"--limit\", help=\"Limit the result (default: %(default)s)\", default=10, type=int) def handle(self, **arguments): print(\"Listing\", arguments.get('limit'), \"items\") class ItemCreateCommand(Command): name = \"create\" help = \"Create new item\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Item name\") def handle(self, **arguments): print(\"Created item with name:\", arguments.get(\"name\")) class ItemSellCommand(Command): name = \"sell\" help = \"Sell an item\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Item name\") parser.add_argument(\"-c\", \"--count\", help=\"Item count\", default=1, type=int) def handle(self, **arguments): name = arguments.get(\"name\") count = arguments.get(\"count\") print(\"Selling totally {} {} items\".format(count, name)) if __name__ == \"__main__\": app = Application(description=\"A simple argparge application\") app.add_argument(\"-v\", \"--version\", action=\"version\", version=\"1.0.0\") app.add_commands( GreetCommand(), GroupCommand( ItemListCommand(), ItemCreateCommand(), ItemSellCommand(), name = \"item\", help = \"Get list of items\" ) ) app.run() Now here is the results.","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#simple-usage-no-subcommands","text":"from argparge import Application app = Application(description=\"A simple argparge application\") app.add_argument(\"message\", help=\"Your message\") app.add_argument(\"-v\", \"--version\", action=\"version\", version=\"1.0.0\") app.run() print(app.arguments)","title":"Simple usage (no subcommands)"},{"location":"tutorial/#multiple-command-usage","text":"Let's have cli that user can greet a person, list , create , sell and item. from argparge import Application from argparge import Command from argparge import GroupCommand class GreetCommand(Command): name = \"greet\" help = \"Greeting a person\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Person name\") def handle(self, **arguments): print(\"Greeting, \", arguments.get(\"name\")) class ItemListCommand(Command): name = \"list\" help = \"List all item\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"--limit\", help=\"Limit the result (default: %(default)s)\", default=10, type=int) def handle(self, **arguments): print(\"Listing\", arguments.get('limit'), \"items\") class ItemCreateCommand(Command): name = \"create\" help = \"Create new item\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Item name\") def handle(self, **arguments): print(\"Created item with name:\", arguments.get(\"name\")) class ItemSellCommand(Command): name = \"sell\" help = \"Sell an item\" def add_arguments(self, parser: \"Command\"): parser.add_argument(\"name\", help=\"Item name\") parser.add_argument(\"-c\", \"--count\", help=\"Item count\", default=1, type=int) def handle(self, **arguments): name = arguments.get(\"name\") count = arguments.get(\"count\") print(\"Selling totally {} {} items\".format(count, name)) if __name__ == \"__main__\": app = Application(description=\"A simple argparge application\") app.add_argument(\"-v\", \"--version\", action=\"version\", version=\"1.0.0\") app.add_commands( GreetCommand(), GroupCommand( ItemListCommand(), ItemCreateCommand(), ItemSellCommand(), name = \"item\", help = \"Get list of items\" ) ) app.run() Now here is the results.","title":"Multiple command usage"}]}